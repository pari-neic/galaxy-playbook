condor_password: "{{nrec_condor_password}}"
condor_uid_domain: usegalaxy.no

ehos_user: ehos
ehos_min_cores: 1
ehos_min_instances: 0
ehos_min_ram: 4
ehos_nodes_max: 6
ehos_nodes_min: 2
ehos_nodes_spare: 2
ehos_sleep: 30

openstack_flavor: m1.medium
openstack_image: GOLD CentOS 7

openstack_network: dualStack
ehos_project_prefix: ehos_v1

ehosd_config_file: templates/ehos/ehos.yaml.j2
ehos_execute_config_file: templates/ehos/execute.yaml.j2
ehosd_systemd: templates/ehos/ehos.service.j2
ehos_condor_master: templates/ehos/condor_master.j2
ehosd_daemon_file: templates/ehos/ehos_daemon.yaml.j2

nfs_exports:
  - "/srv/pulsar *(rw,sync,no_root_squash)"
  - "/srv/galaxy *(rw,sync,no_root_squash)"
  - "/cvmfs/data.galaxyproject.org/ *(ro,sync,no_root_squash,no_subtree_check,fsid=101)"

cvmfs_role: client
galaxy_cvmfs_repos_enabled: config-repo
cvmfs_quota_limit: 6000

pulsar_virtualenv_command: virtualenv-3

pulsar_user: pulsar
pulsar_group: pulsar

pulsar_server_dir: /srv/pulsar
pulsar_venv_dir: "{{pulsar_server_dir}}/venv"
pulsar_config_dir: "{{pulsar_server_dir}}/config"
pulsar_staging_dir: "{{pulsar_server_dir}}/staging"
pulsar_dependencies_dir: "{{pulsar_server_dir}}/dependencies"
pulsar_systemd: true
pulsar_systemd_file: templates/pulsar/pulsar.service.j2
#pulsar_systemd_runner: uwsgi

#galaxy_server_dir: "/srv/galaxy"
#galaxy_config_dir: "{{galaxy_server_dir}}/config"


#pulsar_host: 0.0.0.0
#pulsar_port: 8913

#pulsar_private_token: SecretToken
pulsar_rabbitmq_username: nrec_galaxy
pulsar_rabbitmq_password: "{{nrec_rabbitmq_password}}"
pulsar_rabbitmq_proxy: "{{ groups['database'][0] }}"
pulsar_rabbitmq_vhost: pulsar_nrec

pulsar_message_queue: "amqps://{{ pulsar_rabbitmq_username}}:{{ pulsar_rabbitmq_password}}@{{ pulsar_rabbitmq_proxy }}/%2F{{ pulsar_rabbitmq_vhost }}"

pulsar_create_user: yes

pulsar_optional_dependencies:
  # - pyOpenSSL
  # For remote transfers initiated on the Pulsar end rather than the Galaxy end
  # Does not work, needs to be installed with --install-option="--with-nss"
  #- pycurl
  # uwsgi used for more robust deployment than paste
  - uwsgi
  # drmaa required if connecting to an external DRM using it.
  - drmaa
  # kombu needed if using a message queue
  - kombu
  # requests and requests_toolbelt for remote staging and pycurl is unavailable, poster is not working for python3
  - requests
  - requests_toolbelt
  # psutil and pylockfile are optional dependencies but can make Pulsar
  # more robust in small ways.
  - psutil
  - pylockfile

pulsar_drmaa_library_path: /usr/lib64/condor/libdrmaa.so

pulsar_yaml_config:
  dependency_resolvers_config_file: dependency_resolvers_conf.xml
  conda_auto_init: True
  conda_auto_install: True
  staging_directory: "{{ pulsar_staging_dir }}"
  message_queue_url: "{{ pulsar_message_queue }}"
  managers:
    _default_:
      type: queued_drmaa
      #type: queued_python
      #num_concurrent_jobs: 1
      # Examples for creating queues
    8gb_mem:
      type: queued_drmaa
      native_specification: "request_memory=8"
    16gb_mem:
      type: queued_drmaa
      native_specification: "request_memory=16"
    32gb_mem:
      type: queued_drmaa
      native_specification: "request_memory=32"


telegraf_plugins_extra:
  exec:
    config:
      - interval = '60s'
      - commands =  ['/usr/local/bin/ehos_status.py /usr/local/etc/ehos.yaml']
      - timeout = '10s'
      - data_format = 'influx'
